import { setDefaultTimeout, setWorldConstructor, Before, After } from 'cucumber';
import World from './world';
import fs from 'fs';
import path from 'path';
import filenamify from 'filenamify';

setDefaultTimeout(600000);

setWorldConstructor(World);

Before(async function() {
    await this.openApp();
});

After(async function(scenario) {
    // unique base name for any scenario-related artifacts
    const scenarioFileNameBase = path.join(
        'test-results/e2e/',
        `${Date.now().toString()}_${filenamify(scenario.pickle.name)}`
    );
    // saving screenshot
    const buffer = await this.app.browserWindow.capturePage();
    fs.writeFileSync(scenarioFileNameBase + '.png', buffer);

    // saving main process log
    const mainProcessLogs = [];
    if (this.cachedLogs) {
        mainProcessLogs.push(...this.cachedLogs.map(l => l.main));
    }
    mainProcessLogs.push(await this.app.client.getMainProcessLogs());
    for (let i = 0; i < mainProcessLogs.length; i++) {
        fs.writeFileSync(
            `${scenarioFileNameBase}_mainProcess${mainProcessLogs.length > 1 ? i : ''}.log`,
            mainProcessLogs[i].join('\n')
        );
    }

    // saving renderer (chrome) log
    const rendererLogs = [];
    if (this.cachedLogs) {
        rendererLogs.push(...this.cachedLogs.map(l => l.renderer));
    }
    rendererLogs.push(await this.app.client.getRenderProcessLogs());
    for (let i = 0; i < rendererLogs.length; i++) {
        fs.writeFileSync(
            `${scenarioFileNameBase}_rendererProcess${rendererLogs.length > 1 ? i : ''}.log`,
            rendererLogs[i]
                .map(l => {
                    return `${l.source} ${l.message}`;
                })
                .join('\n')
        );
    }
    // nuke all data generated by this app
    await this.deleteAppData();
    await this.stopApp();
});
